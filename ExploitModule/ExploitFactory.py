from abc import ABC, abstractmethod
import functools
from .exp import ExpBase

class ExploitFactory:
    __exp = {}
    
    @classmethod
    def register(cls, exp_num: str, exp_cls: ExpBase):
        cls.__exp[exp_num] = exp_cls
        
    @classmethod
    def instance(cls, exp_num):
        print(cls.__exp)
        return cls.__exp[exp_num]
    
def exp_register(exp_num):
    def wrapper(cls):
        print(exp_num)
        ExploitFactory.register(exp_num, cls)
        
        @functools.wraps(cls)
        def inner(*args, **kwargs):
            return cls(*args, **kwargs)
        return inner
    return wrapper